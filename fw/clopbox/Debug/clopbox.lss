
clopbox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000994  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b9  00800100  00800100  00000a08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ba1  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d99  00000000  00000000  00002749  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001053  00000000  00000000  000034e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00004538  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074b  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001627  00000000  00000000  00004f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  00006572  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_9>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_20>
  54:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_21>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  6c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  70:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  74:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

0000007c <UARTFunctions>:
  7c:	00 00 00 01 00 00 10 cd 01 12 fb 01 15 d6 01 16     ................
  8c:	0d 02                                               ..

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a9 3b       	cpi	r26, 0xB9	; 185
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  ae:	0c 94 c8 04 	jmp	0x990	; 0x990 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <data_init>:
uint8_t outputs[output_num];
uint16_t outputs_timers[output_num];
uint8_t outputs_timers_powers[output_num];

void data_init() {
	memset(&outputs, 0, sizeof(outputs));
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	e1 eb       	ldi	r30, 0xB1	; 177
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	df 01       	movw	r26, r30
  be:	98 2f       	mov	r25, r24
  c0:	1d 92       	st	X+, r1
  c2:	9a 95       	dec	r25
  c4:	e9 f7       	brne	.-6      	; 0xc0 <data_init+0xa>
	memset(&outputs_timers, 0, sizeof(outputs_timers));
  c6:	90 e1       	ldi	r25, 0x10	; 16
  c8:	e1 ea       	ldi	r30, 0xA1	; 161
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	df 01       	movw	r26, r30
  ce:	1d 92       	st	X+, r1
  d0:	9a 95       	dec	r25
  d2:	e9 f7       	brne	.-6      	; 0xce <data_init+0x18>
	memset(&outputs_timers_powers, 0, sizeof(outputs_timers_powers));
  d4:	e9 e9       	ldi	r30, 0x99	; 153
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	df 01       	movw	r26, r30
  da:	1d 92       	st	X+, r1
  dc:	8a 95       	dec	r24
  de:	e9 f7       	brne	.-6      	; 0xda <data_init+0x24>
  e0:	08 95       	ret

000000e2 <hardware_init>:

static uint8_t phase = 0;

void hardware_init() {
	// disable external clock to enable PORTC7
	ASSR &= ~(1 << EXCLK) & ~(1 << AS2);
  e2:	e6 eb       	ldi	r30, 0xB6	; 182
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 79       	andi	r24, 0x9F	; 159
  ea:	80 83       	st	Z, r24
	// setup all outputs
	DDRC = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	87 b9       	out	0x07, r24	; 7
	// setup a timer
	// mode CTC, clear after TCNT2 == OCR2A
	TCCR2A = (1 << WGM21) | (0 << WGM20);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	// prescaling 1, frequency 62500, 256 timer, period 976.5625Hz
	TCCR2B = (0 << CS22) | (0 << CS21) | (1 << CS20) | (0 << WGM22);
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	// make it 1kHz exactly to count milliseconds as well
	OCR2A = 250-1;
  fc:	99 ef       	ldi	r25, 0xF9	; 249
  fe:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	// enable overflow interrupt
	TIMSK2 = (1 << OCIE2A);
 102:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 106:	08 95       	ret

00000108 <__vector_9>:
}


ISR(TIMER2_COMPA_vect) {
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
	phase += 1;
 136:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	9f 5f       	subi	r25, 0xFF	; 255
	if (64 <= phase) {
 13c:	90 34       	cpi	r25, 0x40	; 64
 13e:	08 f4       	brcc	.+2      	; 0x142 <__vector_9+0x3a>
 140:	f3 c0       	rjmp	.+486    	; 0x328 <__vector_9+0x220>
		phase = 0;
 142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
 146:	e0 90 a1 01 	lds	r14, 0x01A1	; 0x8001a1 <outputs_timers>
 14a:	f0 90 a2 01 	lds	r15, 0x01A2	; 0x8001a2 <outputs_timers+0x1>
 14e:	e1 14       	cp	r14, r1
 150:	f1 04       	cpc	r15, r1
 152:	39 f0       	breq	.+14     	; 0x162 <__vector_9+0x5a>
				outputs_timers[i] -= 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	e8 1a       	sub	r14, r24
 158:	f1 08       	sbc	r15, r1
 15a:	f0 92 a2 01 	sts	0x01A2, r15	; 0x8001a2 <outputs_timers+0x1>
 15e:	e0 92 a1 01 	sts	0x01A1, r14	; 0x8001a1 <outputs_timers>
	phase += 1;
	if (64 <= phase) {
		phase = 0;
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
 162:	00 91 a3 01 	lds	r16, 0x01A3	; 0x8001a3 <outputs_timers+0x2>
 166:	10 91 a4 01 	lds	r17, 0x01A4	; 0x8001a4 <outputs_timers+0x3>
 16a:	01 15       	cp	r16, r1
 16c:	11 05       	cpc	r17, r1
 16e:	31 f0       	breq	.+12     	; 0x17c <__vector_9+0x74>
				outputs_timers[i] -= 1;
 170:	01 50       	subi	r16, 0x01	; 1
 172:	11 09       	sbc	r17, r1
 174:	10 93 a4 01 	sts	0x01A4, r17	; 0x8001a4 <outputs_timers+0x3>
 178:	00 93 a3 01 	sts	0x01A3, r16	; 0x8001a3 <outputs_timers+0x2>
	phase += 1;
	if (64 <= phase) {
		phase = 0;
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
 17c:	c0 91 a5 01 	lds	r28, 0x01A5	; 0x8001a5 <outputs_timers+0x4>
 180:	d0 91 a6 01 	lds	r29, 0x01A6	; 0x8001a6 <outputs_timers+0x5>
 184:	20 97       	sbiw	r28, 0x00	; 0
 186:	29 f0       	breq	.+10     	; 0x192 <__vector_9+0x8a>
				outputs_timers[i] -= 1;
 188:	21 97       	sbiw	r28, 0x01	; 1
 18a:	d0 93 a6 01 	sts	0x01A6, r29	; 0x8001a6 <outputs_timers+0x5>
 18e:	c0 93 a5 01 	sts	0x01A5, r28	; 0x8001a5 <outputs_timers+0x4>
	phase += 1;
	if (64 <= phase) {
		phase = 0;
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
 192:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <outputs_timers+0x6>
 196:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <outputs_timers+0x7>
 19a:	10 97       	sbiw	r26, 0x00	; 0
 19c:	29 f0       	breq	.+10     	; 0x1a8 <__vector_9+0xa0>
				outputs_timers[i] -= 1;
 19e:	11 97       	sbiw	r26, 0x01	; 1
 1a0:	b0 93 a8 01 	sts	0x01A8, r27	; 0x8001a8 <outputs_timers+0x7>
 1a4:	a0 93 a7 01 	sts	0x01A7, r26	; 0x8001a7 <outputs_timers+0x6>
	phase += 1;
	if (64 <= phase) {
		phase = 0;
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
 1a8:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <outputs_timers+0x8>
 1ac:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <outputs_timers+0x9>
 1b0:	30 97       	sbiw	r30, 0x00	; 0
 1b2:	29 f0       	breq	.+10     	; 0x1be <__vector_9+0xb6>
				outputs_timers[i] -= 1;
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f0 93 aa 01 	sts	0x01AA, r31	; 0x8001aa <outputs_timers+0x9>
 1ba:	e0 93 a9 01 	sts	0x01A9, r30	; 0x8001a9 <outputs_timers+0x8>
	phase += 1;
	if (64 <= phase) {
		phase = 0;
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
 1be:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <outputs_timers+0xa>
 1c2:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <outputs_timers+0xb>
 1c6:	61 15       	cp	r22, r1
 1c8:	71 05       	cpc	r23, r1
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <__vector_9+0xd0>
				outputs_timers[i] -= 1;
 1cc:	61 50       	subi	r22, 0x01	; 1
 1ce:	71 09       	sbc	r23, r1
 1d0:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <outputs_timers+0xb>
 1d4:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <outputs_timers+0xa>
	phase += 1;
	if (64 <= phase) {
		phase = 0;
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
 1d8:	40 91 ad 01 	lds	r20, 0x01AD	; 0x8001ad <outputs_timers+0xc>
 1dc:	50 91 ae 01 	lds	r21, 0x01AE	; 0x8001ae <outputs_timers+0xd>
 1e0:	41 15       	cp	r20, r1
 1e2:	51 05       	cpc	r21, r1
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <__vector_9+0xea>
				outputs_timers[i] -= 1;
 1e6:	41 50       	subi	r20, 0x01	; 1
 1e8:	51 09       	sbc	r21, r1
 1ea:	50 93 ae 01 	sts	0x01AE, r21	; 0x8001ae <outputs_timers+0xd>
 1ee:	40 93 ad 01 	sts	0x01AD, r20	; 0x8001ad <outputs_timers+0xc>
	phase += 1;
	if (64 <= phase) {
		phase = 0;
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
 1f2:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <outputs_timers+0xe>
 1f6:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <outputs_timers+0xf>
 1fa:	21 15       	cp	r18, r1
 1fc:	31 05       	cpc	r19, r1
 1fe:	09 f0       	breq	.+2      	; 0x202 <__vector_9+0xfa>
 200:	b6 c0       	rjmp	.+364    	; 0x36e <__vector_9+0x266>
 202:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
			i_output = outputs_timers_powers[i] <= phase;
 204:	81 e0       	ldi	r24, 0x01	; 1
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
 206:	ef 28       	or	r14, r15
 208:	09 f0       	breq	.+2      	; 0x20c <__vector_9+0x104>
 20a:	87 c0       	rjmp	.+270    	; 0x31a <__vector_9+0x212>
			i_output = outputs_timers_powers[i] <= phase;
		} else {
			i_output = outputs[i] <= phase;
 20c:	f0 90 b1 01 	lds	r15, 0x01B1	; 0x8001b1 <outputs>
 210:	9f 15       	cp	r25, r15
 212:	08 f4       	brcc	.+2      	; 0x216 <__vector_9+0x10e>
 214:	87 c0       	rjmp	.+270    	; 0x324 <__vector_9+0x21c>
		}
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
 216:	88 0f       	add	r24, r24
		if (outputs_timers[i]) {
 218:	01 2b       	or	r16, r17
 21a:	09 f0       	breq	.+2      	; 0x21e <__vector_9+0x116>
 21c:	77 c0       	rjmp	.+238    	; 0x30c <__vector_9+0x204>
			i_output = outputs_timers_powers[i] <= phase;
		} else {
			i_output = outputs[i] <= phase;
 21e:	10 91 b2 01 	lds	r17, 0x01B2	; 0x8001b2 <outputs+0x1>
 222:	91 17       	cp	r25, r17
 224:	08 f0       	brcs	.+2      	; 0x228 <__vector_9+0x120>
 226:	77 c0       	rjmp	.+238    	; 0x316 <__vector_9+0x20e>
		}
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
 228:	88 0f       	add	r24, r24
		if (outputs_timers[i]) {
 22a:	cd 2b       	or	r28, r29
 22c:	09 f0       	breq	.+2      	; 0x230 <__vector_9+0x128>
 22e:	67 c0       	rjmp	.+206    	; 0x2fe <__vector_9+0x1f6>
			i_output = outputs_timers_powers[i] <= phase;
		} else {
			i_output = outputs[i] <= phase;
 230:	c0 91 b3 01 	lds	r28, 0x01B3	; 0x8001b3 <outputs+0x2>
 234:	9c 17       	cp	r25, r28
 236:	08 f0       	brcs	.+2      	; 0x23a <__vector_9+0x132>
 238:	67 c0       	rjmp	.+206    	; 0x308 <__vector_9+0x200>
		}
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
 23a:	88 0f       	add	r24, r24
		if (outputs_timers[i]) {
 23c:	ab 2b       	or	r26, r27
 23e:	09 f0       	breq	.+2      	; 0x242 <__vector_9+0x13a>
 240:	57 c0       	rjmp	.+174    	; 0x2f0 <__vector_9+0x1e8>
			i_output = outputs_timers_powers[i] <= phase;
		} else {
			i_output = outputs[i] <= phase;
 242:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <outputs+0x3>
 246:	9a 17       	cp	r25, r26
 248:	08 f0       	brcs	.+2      	; 0x24c <__vector_9+0x144>
 24a:	57 c0       	rjmp	.+174    	; 0x2fa <__vector_9+0x1f2>
		}
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
 24c:	88 0f       	add	r24, r24
		if (outputs_timers[i]) {
 24e:	ef 2b       	or	r30, r31
 250:	09 f0       	breq	.+2      	; 0x254 <__vector_9+0x14c>
 252:	47 c0       	rjmp	.+142    	; 0x2e2 <__vector_9+0x1da>
			i_output = outputs_timers_powers[i] <= phase;
		} else {
			i_output = outputs[i] <= phase;
 254:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <outputs+0x4>
 258:	9e 17       	cp	r25, r30
 25a:	08 f0       	brcs	.+2      	; 0x25e <__vector_9+0x156>
 25c:	47 c0       	rjmp	.+142    	; 0x2ec <__vector_9+0x1e4>
		}
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
 25e:	88 0f       	add	r24, r24
		if (outputs_timers[i]) {
 260:	67 2b       	or	r22, r23
 262:	c9 f5       	brne	.+114    	; 0x2d6 <__vector_9+0x1ce>
			i_output = outputs_timers_powers[i] <= phase;
		} else {
			i_output = outputs[i] <= phase;
 264:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <outputs+0x5>
 268:	96 17       	cp	r25, r22
 26a:	c8 f5       	brcc	.+114    	; 0x2de <__vector_9+0x1d6>
		}
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
 26c:	88 0f       	add	r24, r24
		if (outputs_timers[i]) {
 26e:	45 2b       	or	r20, r21
 270:	21 f5       	brne	.+72     	; 0x2ba <__vector_9+0x1b2>
			i_output = outputs_timers_powers[i] <= phase;
		} else {
			i_output = outputs[i] <= phase;
 272:	40 91 b7 01 	lds	r20, 0x01B7	; 0x8001b7 <outputs+0x6>
 276:	94 17       	cp	r25, r20
 278:	20 f5       	brcc	.+72     	; 0x2c2 <__vector_9+0x1ba>
		}
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
 27a:	88 0f       	add	r24, r24
		if (outputs_timers[i]) {
 27c:	23 2b       	or	r18, r19
 27e:	29 f1       	breq	.+74     	; 0x2ca <__vector_9+0x1c2>
			i_output = outputs_timers_powers[i] <= phase;
 280:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <outputs_timers_powers+0x7>
 284:	92 17       	cp	r25, r18
 286:	08 f0       	brcs	.+2      	; 0x28a <__vector_9+0x182>
		} else {
			i_output = outputs[i] <= phase;
		}
		if (i_output) output |= 1;
 288:	81 60       	ori	r24, 0x01	; 1
	}
	PORTC = output;
 28a:	88 b9       	out	0x08, r24	; 8
}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	7f 91       	pop	r23
 29e:	6f 91       	pop	r22
 2a0:	5f 91       	pop	r21
 2a2:	4f 91       	pop	r20
 2a4:	3f 91       	pop	r19
 2a6:	2f 91       	pop	r18
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
			i_output = outputs_timers_powers[i] <= phase;
 2ba:	40 91 9f 01 	lds	r20, 0x019F	; 0x80019f <outputs_timers_powers+0x6>
 2be:	94 17       	cp	r25, r20
 2c0:	e0 f2       	brcs	.-72     	; 0x27a <__vector_9+0x172>
		} else {
			i_output = outputs[i] <= phase;
		}
		if (i_output) output |= 1;
 2c2:	81 60       	ori	r24, 0x01	; 1
		}
	}
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
 2c4:	88 0f       	add	r24, r24
		if (outputs_timers[i]) {
 2c6:	23 2b       	or	r18, r19
 2c8:	d9 f6       	brne	.-74     	; 0x280 <__vector_9+0x178>
			i_output = outputs_timers_powers[i] <= phase;
		} else {
			i_output = outputs[i] <= phase;
 2ca:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <outputs+0x7>
 2ce:	92 17       	cp	r25, r18
 2d0:	e0 f2       	brcs	.-72     	; 0x28a <__vector_9+0x182>
		}
		if (i_output) output |= 1;
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	da cf       	rjmp	.-76     	; 0x28a <__vector_9+0x182>
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
			i_output = outputs_timers_powers[i] <= phase;
 2d6:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <outputs_timers_powers+0x5>
 2da:	96 17       	cp	r25, r22
 2dc:	38 f2       	brcs	.-114    	; 0x26c <__vector_9+0x164>
		} else {
			i_output = outputs[i] <= phase;
		}
		if (i_output) output |= 1;
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	c5 cf       	rjmp	.-118    	; 0x26c <__vector_9+0x164>
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
			i_output = outputs_timers_powers[i] <= phase;
 2e2:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <outputs_timers_powers+0x4>
 2e6:	9e 17       	cp	r25, r30
 2e8:	08 f4       	brcc	.+2      	; 0x2ec <__vector_9+0x1e4>
 2ea:	b9 cf       	rjmp	.-142    	; 0x25e <__vector_9+0x156>
		} else {
			i_output = outputs[i] <= phase;
		}
		if (i_output) output |= 1;
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	b7 cf       	rjmp	.-146    	; 0x25e <__vector_9+0x156>
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
			i_output = outputs_timers_powers[i] <= phase;
 2f0:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <outputs_timers_powers+0x3>
 2f4:	9a 17       	cp	r25, r26
 2f6:	08 f4       	brcc	.+2      	; 0x2fa <__vector_9+0x1f2>
 2f8:	a9 cf       	rjmp	.-174    	; 0x24c <__vector_9+0x144>
		} else {
			i_output = outputs[i] <= phase;
		}
		if (i_output) output |= 1;
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	a7 cf       	rjmp	.-178    	; 0x24c <__vector_9+0x144>
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
			i_output = outputs_timers_powers[i] <= phase;
 2fe:	c0 91 9b 01 	lds	r28, 0x019B	; 0x80019b <outputs_timers_powers+0x2>
 302:	9c 17       	cp	r25, r28
 304:	08 f4       	brcc	.+2      	; 0x308 <__vector_9+0x200>
 306:	99 cf       	rjmp	.-206    	; 0x23a <__vector_9+0x132>
		} else {
			i_output = outputs[i] <= phase;
		}
		if (i_output) output |= 1;
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	97 cf       	rjmp	.-210    	; 0x23a <__vector_9+0x132>
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
			i_output = outputs_timers_powers[i] <= phase;
 30c:	10 91 9a 01 	lds	r17, 0x019A	; 0x80019a <outputs_timers_powers+0x1>
 310:	91 17       	cp	r25, r17
 312:	08 f4       	brcc	.+2      	; 0x316 <__vector_9+0x20e>
 314:	89 cf       	rjmp	.-238    	; 0x228 <__vector_9+0x120>
		} else {
			i_output = outputs[i] <= phase;
		}
		if (i_output) output |= 1;
 316:	81 60       	ori	r24, 0x01	; 1
 318:	87 cf       	rjmp	.-242    	; 0x228 <__vector_9+0x120>
	uint8_t output = 0;
	bool i_output;
	for (int i = 0; i < output_num; i++) {
		output <<= 1;
		if (outputs_timers[i]) {
			i_output = outputs_timers_powers[i] <= phase;
 31a:	f0 90 99 01 	lds	r15, 0x0199	; 0x800199 <outputs_timers_powers>
 31e:	9f 15       	cp	r25, r15
 320:	08 f0       	brcs	.+2      	; 0x324 <__vector_9+0x21c>
 322:	79 cf       	rjmp	.-270    	; 0x216 <__vector_9+0x10e>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	77 cf       	rjmp	.-274    	; 0x216 <__vector_9+0x10e>
	TIMSK2 = (1 << OCIE2A);
}


ISR(TIMER2_COMPA_vect) {
	phase += 1;
 328:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
 32c:	e0 90 a1 01 	lds	r14, 0x01A1	; 0x8001a1 <outputs_timers>
 330:	f0 90 a2 01 	lds	r15, 0x01A2	; 0x8001a2 <outputs_timers+0x1>
 334:	00 91 a3 01 	lds	r16, 0x01A3	; 0x8001a3 <outputs_timers+0x2>
 338:	10 91 a4 01 	lds	r17, 0x01A4	; 0x8001a4 <outputs_timers+0x3>
 33c:	c0 91 a5 01 	lds	r28, 0x01A5	; 0x8001a5 <outputs_timers+0x4>
 340:	d0 91 a6 01 	lds	r29, 0x01A6	; 0x8001a6 <outputs_timers+0x5>
 344:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <outputs_timers+0x6>
 348:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <outputs_timers+0x7>
 34c:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <outputs_timers+0x8>
 350:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <outputs_timers+0x9>
 354:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <outputs_timers+0xa>
 358:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <outputs_timers+0xb>
 35c:	40 91 ad 01 	lds	r20, 0x01AD	; 0x8001ad <outputs_timers+0xc>
 360:	50 91 ae 01 	lds	r21, 0x01AE	; 0x8001ae <outputs_timers+0xd>
 364:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <outputs_timers+0xe>
 368:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <outputs_timers+0xf>
 36c:	4b cf       	rjmp	.-362    	; 0x204 <__vector_9+0xfc>
	if (64 <= phase) {
		phase = 0;
		// decrement once per period, so it is a milliseconds
		for (int i = 0; i < output_num; i++) {
			if (outputs_timers[i]) {
				outputs_timers[i] -= 1;
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	31 09       	sbc	r19, r1
 372:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <outputs_timers+0xf>
 376:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <outputs_timers+0xe>
 37a:	43 cf       	rjmp	.-378    	; 0x202 <__vector_9+0xfa>

0000037c <main>:
#include "uart.h"


int main(void)
{
	data_init();
 37c:	0e 94 5b 00 	call	0xb6	; 0xb6 <data_init>
	hardware_init();
 380:	0e 94 71 00 	call	0xe2	; 0xe2 <hardware_init>
	uart_init();
 384:	0e 94 cd 03 	call	0x79a	; 0x79a <uart_init>
 388:	88 e0       	ldi	r24, 0x08	; 8
 38a:	e1 eb       	ldi	r30, 0xB1	; 177
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	df 01       	movw	r26, r30
 390:	1d 92       	st	X+, r1
 392:	8a 95       	dec	r24
 394:	e9 f7       	brne	.-6      	; 0x390 <main+0x14>
	for (int i = 0; i < output_num; i++) {
		outputs[i] = 0;
	}
	sei();
 396:	78 94       	sei
 398:	ff cf       	rjmp	.-2      	; 0x398 <main+0x1c>

0000039a <resetOutputs>:
uint8_t version(const uint8_t *payload, const uint8_t payloadSize, uint8_t *response, uint8_t *responseSize) {
	*responseSize = 4;
	return eucOk;
}

uint8_t resetOutputs(const uint8_t *payload, const uint8_t payloadSize, uint8_t *response, uint8_t *responseSize) {
 39a:	88 e0       	ldi	r24, 0x08	; 8
 39c:	e1 eb       	ldi	r30, 0xB1	; 177
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	df 01       	movw	r26, r30
 3a2:	1d 92       	st	X+, r1
 3a4:	8a 95       	dec	r24
 3a6:	e9 f7       	brne	.-6      	; 0x3a2 <resetOutputs+0x8>
	for (int i = 0; i < output_num; i++) {
		outputs[i] = 0;
	}
	return eucOk;
}
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	08 95       	ret

000003ac <getOutputs>:
	if (MAX_POWER <= payload[1]) return eucArgumentValidationError;
	outputs[payload[0]] = payload[1];
	return eucOk;
}

uint8_t getOutputs(const uint8_t *payload, const uint8_t payloadSize, uint8_t *response, uint8_t *responseSize) {
 3ac:	fa 01       	movw	r30, r20
	for (int i = 0; i < output_num; i++) {
		response[i] = outputs[i];
 3ae:	a1 eb       	ldi	r26, 0xB1	; 177
 3b0:	b1 e0       	ldi	r27, 0x01	; 1
 3b2:	8c 91       	ld	r24, X
 3b4:	80 83       	st	Z, r24
 3b6:	11 96       	adiw	r26, 0x01	; 1
 3b8:	8c 91       	ld	r24, X
 3ba:	11 97       	sbiw	r26, 0x01	; 1
 3bc:	81 83       	std	Z+1, r24	; 0x01
 3be:	12 96       	adiw	r26, 0x02	; 2
 3c0:	8c 91       	ld	r24, X
 3c2:	12 97       	sbiw	r26, 0x02	; 2
 3c4:	82 83       	std	Z+2, r24	; 0x02
 3c6:	13 96       	adiw	r26, 0x03	; 3
 3c8:	8c 91       	ld	r24, X
 3ca:	13 97       	sbiw	r26, 0x03	; 3
 3cc:	83 83       	std	Z+3, r24	; 0x03
 3ce:	14 96       	adiw	r26, 0x04	; 4
 3d0:	8c 91       	ld	r24, X
 3d2:	14 97       	sbiw	r26, 0x04	; 4
 3d4:	84 83       	std	Z+4, r24	; 0x04
 3d6:	15 96       	adiw	r26, 0x05	; 5
 3d8:	8c 91       	ld	r24, X
 3da:	15 97       	sbiw	r26, 0x05	; 5
 3dc:	85 83       	std	Z+5, r24	; 0x05
 3de:	16 96       	adiw	r26, 0x06	; 6
 3e0:	8c 91       	ld	r24, X
 3e2:	16 97       	sbiw	r26, 0x06	; 6
 3e4:	86 83       	std	Z+6, r24	; 0x06
 3e6:	17 96       	adiw	r26, 0x07	; 7
 3e8:	8c 91       	ld	r24, X
 3ea:	87 83       	std	Z+7, r24	; 0x07
	}
	*responseSize = output_num;
 3ec:	88 e0       	ldi	r24, 0x08	; 8
 3ee:	f9 01       	movw	r30, r18
 3f0:	80 83       	st	Z, r24
	return eucOk;
}
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret

000003f6 <setOutput>:

uint8_t setOutput(const uint8_t *payload, const uint8_t payloadSize, uint8_t *response, uint8_t *responseSize) {
	// 0th is output number
	// 1st is power
	// validation
	if (2 != payloadSize) return eucArgumentValidationError;
 3f6:	62 30       	cpi	r22, 0x02	; 2
 3f8:	11 f0       	breq	.+4      	; 0x3fe <setOutput+0x8>
 3fa:	83 e9       	ldi	r24, 0x93	; 147
	if (output_num <= payload[0]) return eucArgumentValidationError;
	if (MAX_POWER <= payload[1]) return eucArgumentValidationError;
	outputs[payload[0]] = payload[1];
	return eucOk;
}
 3fc:	08 95       	ret
uint8_t setOutput(const uint8_t *payload, const uint8_t payloadSize, uint8_t *response, uint8_t *responseSize) {
	// 0th is output number
	// 1st is power
	// validation
	if (2 != payloadSize) return eucArgumentValidationError;
	if (output_num <= payload[0]) return eucArgumentValidationError;
 3fe:	dc 01       	movw	r26, r24
 400:	ec 91       	ld	r30, X
 402:	e8 30       	cpi	r30, 0x08	; 8
 404:	d0 f7       	brcc	.-12     	; 0x3fa <setOutput+0x4>
	if (MAX_POWER <= payload[1]) return eucArgumentValidationError;
 406:	11 96       	adiw	r26, 0x01	; 1
 408:	8c 91       	ld	r24, X
 40a:	8f 33       	cpi	r24, 0x3F	; 63
 40c:	b0 f7       	brcc	.-20     	; 0x3fa <setOutput+0x4>
	outputs[payload[0]] = payload[1];
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	ef 54       	subi	r30, 0x4F	; 79
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	80 83       	st	Z, r24
	return eucOk;
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret

0000041a <setOutputWithTimeout>:
	// 0th is output number
	// 1st is power
	// 2nd and 3rd is time in milliseconds
	// after timeout it will return to its original value, set by setOutput
	// validation
	if (4 != payloadSize) return eucArgumentValidationError;
 41a:	64 30       	cpi	r22, 0x04	; 4
 41c:	11 f0       	breq	.+4      	; 0x422 <setOutputWithTimeout+0x8>
 41e:	83 e9       	ldi	r24, 0x93	; 147
	if (output_num <= payload[0]) return eucArgumentValidationError;
	if (MAX_POWER <= payload[1]) return eucArgumentValidationError;
	outputs_timers_powers[payload[0]] = payload[1];
	outputs_timers[payload[0]] = (payload[3] << 8) + payload[2];
	return eucOk;
}
 420:	08 95       	ret
	// 1st is power
	// 2nd and 3rd is time in milliseconds
	// after timeout it will return to its original value, set by setOutput
	// validation
	if (4 != payloadSize) return eucArgumentValidationError;
	if (output_num <= payload[0]) return eucArgumentValidationError;
 422:	dc 01       	movw	r26, r24
 424:	ec 91       	ld	r30, X
 426:	e8 30       	cpi	r30, 0x08	; 8
 428:	d0 f7       	brcc	.-12     	; 0x41e <setOutputWithTimeout+0x4>
	if (MAX_POWER <= payload[1]) return eucArgumentValidationError;
 42a:	11 96       	adiw	r26, 0x01	; 1
 42c:	2c 91       	ld	r18, X
 42e:	11 97       	sbiw	r26, 0x01	; 1
 430:	2f 33       	cpi	r18, 0x3F	; 63
 432:	a8 f7       	brcc	.-22     	; 0x41e <setOutputWithTimeout+0x4>
	outputs_timers_powers[payload[0]] = payload[1];
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	e7 56       	subi	r30, 0x67	; 103
 438:	fe 4f       	sbci	r31, 0xFE	; 254
 43a:	20 83       	st	Z, r18
	outputs_timers[payload[0]] = (payload[3] << 8) + payload[2];
 43c:	ec 91       	ld	r30, X
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	ef 55       	subi	r30, 0x5F	; 95
 446:	fe 4f       	sbci	r31, 0xFE	; 254
 448:	13 96       	adiw	r26, 0x03	; 3
 44a:	2c 91       	ld	r18, X
 44c:	13 97       	sbiw	r26, 0x03	; 3
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	32 2f       	mov	r19, r18
 452:	22 27       	eor	r18, r18
 454:	12 96       	adiw	r26, 0x02	; 2
 456:	8c 91       	ld	r24, X
 458:	a9 01       	movw	r20, r18
 45a:	48 0f       	add	r20, r24
 45c:	51 1d       	adc	r21, r1
 45e:	51 83       	std	Z+1, r21	; 0x01
 460:	40 83       	st	Z, r20
	return eucOk;
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	08 95       	ret

00000466 <UARTBeginTransaction>:
		}
	}
}

void UARTBeginTransaction() {
	state = usProtoVer;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
 46c:	08 95       	ret

0000046e <UARTProcessNextByte>:
}

bool UARTProcessNextByte(unsigned char b, uint8_t *respBuffer, uint8_t *respSize) {
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	1f 92       	push	r1
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
	switch (state) {
 480:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <state>
 484:	92 30       	cpi	r25, 0x02	; 2
 486:	f1 f1       	breq	.+124    	; 0x504 <UARTProcessNextByte+0x96>
 488:	68 f1       	brcs	.+90     	; 0x4e4 <UARTProcessNextByte+0x76>
 48a:	7a 01       	movw	r14, r20
 48c:	8b 01       	movw	r16, r22
 48e:	93 30       	cpi	r25, 0x03	; 3
 490:	d1 f0       	breq	.+52     	; 0x4c6 <UARTProcessNextByte+0x58>
 492:	94 30       	cpi	r25, 0x04	; 4
 494:	79 f4       	brne	.+30     	; 0x4b4 <UARTProcessNextByte+0x46>
			payloadSize = b;
			position = 0;
			break;
		}
		case usPData: {
			payload[position++] = b;
 496:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <position>
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	9e 0f       	add	r25, r30
 49e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <position>
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	ef 5f       	subi	r30, 0xFF	; 255
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	80 83       	st	Z, r24
			if (payloadSize <= position) {
 4aa:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <payloadSize>
 4ae:	96 17       	cp	r25, r22
 4b0:	08 f0       	brcs	.+2      	; 0x4b4 <UARTProcessNextByte+0x46>
 4b2:	4b c0       	rjmp	.+150    	; 0x54a <UARTProcessNextByte+0xdc>
				return true;
			}
			break;
		}
	}
	return false;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
}
 4b6:	0f 90       	pop	r0
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	08 95       	ret
			command = b;
			state = usPDataLength;
			break;
		}
		case usPDataLength: {
			if (MAX_DATA_LENGTH <= b) {
 4c6:	80 31       	cpi	r24, 0x10	; 16
 4c8:	08 f0       	brcs	.+2      	; 0x4cc <UARTProcessNextByte+0x5e>
 4ca:	73 c0       	rjmp	.+230    	; 0x5b2 <UARTProcessNextByte+0x144>
				state = usError;
				generateErrorResponse(eucMemoryError, respBuffer, respSize);
				return true;
			} else if (0 == b) {
 4cc:	88 23       	and	r24, r24
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <UARTProcessNextByte+0x64>
 4d0:	9b c0       	rjmp	.+310    	; 0x608 <UARTProcessNextByte+0x19a>
				// no payload
				state = usEnd;
				generateResponse(respBuffer, respSize);
				return true;
			}
			state = usPData;
 4d2:	94 e0       	ldi	r25, 0x04	; 4
 4d4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <state>
			payloadSize = b;
 4d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <payloadSize>
			position = 0;
 4dc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <position>
				return true;
			}
			break;
		}
	}
	return false;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
			state = usPData;
			payloadSize = b;
			position = 0;
			break;
 4e2:	e9 cf       	rjmp	.-46     	; 0x4b6 <UARTProcessNextByte+0x48>
void UARTBeginTransaction() {
	state = usProtoVer;
}

bool UARTProcessNextByte(unsigned char b, uint8_t *respBuffer, uint8_t *respSize) {
	switch (state) {
 4e4:	91 30       	cpi	r25, 0x01	; 1
 4e6:	31 f7       	brne	.-52     	; 0x4b4 <UARTProcessNextByte+0x46>
		}
		case usError: {
			break;
		}
		case usProtoVer: {
			if (PROTO_VERSION == b) {
 4e8:	81 11       	cpse	r24, r1
 4ea:	1a c0       	rjmp	.+52     	; 0x520 <UARTProcessNextByte+0xb2>
				state = usCommand;
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
				return true;
			}
			break;
		}
	}
	return false;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
}
 4f4:	0f 90       	pop	r0
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	ff 90       	pop	r15
 500:	ef 90       	pop	r14
 502:	08 95       	ret
				return true;
			}
			break;
		}
		case usCommand: {
			command = b;
 504:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <command>
			state = usPDataLength;
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
				return true;
			}
			break;
		}
	}
	return false;
 50e:	80 e0       	ldi	r24, 0x00	; 0
}
 510:	0f 90       	pop	r0
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	08 95       	ret
		}
		case usProtoVer: {
			if (PROTO_VERSION == b) {
				state = usCommand;
			} else {
				state = usError;
 520:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <state>
static usState state;
static uint8_t position = 0;
static uint8_t command, payloadSize, payload[MAX_DATA_LENGTH];

void generateErrorResponse(const eUARTResponseCodes code, uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
 524:	fb 01       	movw	r30, r22
 526:	10 82       	st	Z, r1
	response[1] = 0xFF; // command
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	81 83       	std	Z+1, r24	; 0x01
	response[2] = code;
 52c:	80 e9       	ldi	r24, 0x90	; 144
 52e:	82 83       	std	Z+2, r24	; 0x02
	response[3] = 0; // payload size
 530:	13 82       	std	Z+3, r1	; 0x03
	*length = 4;
 532:	84 e0       	ldi	r24, 0x04	; 4
 534:	fa 01       	movw	r30, r20
 536:	80 83       	st	Z, r24
			if (PROTO_VERSION == b) {
				state = usCommand;
			} else {
				state = usError;
				generateErrorResponse(eucBadVersion, respBuffer, respSize);
				return true;
 538:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
		}
	}
	return false;
}
 53a:	0f 90       	pop	r0
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	08 95       	ret
			break;
		}
		case usPData: {
			payload[position++] = b;
			if (payloadSize <= position) {
				state = usEnd;
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
	response[3] = 0; // payload size
	*length = 4;
}

void generateResponse(uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
 550:	f8 01       	movw	r30, r16
 552:	10 82       	st	Z, r1
	response[1] = command;
 554:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <command>
 558:	81 83       	std	Z+1, r24	; 0x01
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
 55a:	ec e7       	ldi	r30, 0x7C	; 124
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	e4 91       	lpm	r30, Z
		if (command == iCommand) {
 560:	8e 17       	cp	r24, r30
 562:	09 f4       	brne	.+2      	; 0x566 <UARTProcessNextByte+0xf8>
 564:	f3 c0       	rjmp	.+486    	; 0x74c <UARTProcessNextByte+0x2de>

void generateResponse(uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
 566:	ef e7       	ldi	r30, 0x7F	; 127
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	e4 91       	lpm	r30, Z
		if (command == iCommand) {
 56c:	8e 17       	cp	r24, r30
 56e:	09 f4       	brne	.+2      	; 0x572 <UARTProcessNextByte+0x104>
 570:	d0 c0       	rjmp	.+416    	; 0x712 <UARTProcessNextByte+0x2a4>

void generateResponse(uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
 572:	e2 e8       	ldi	r30, 0x82	; 130
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	e4 91       	lpm	r30, Z
		if (command == iCommand) {
 578:	8e 17       	cp	r24, r30
 57a:	09 f4       	brne	.+2      	; 0x57e <UARTProcessNextByte+0x110>
 57c:	ac c0       	rjmp	.+344    	; 0x6d6 <UARTProcessNextByte+0x268>

void generateResponse(uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
 57e:	e5 e8       	ldi	r30, 0x85	; 133
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	e4 91       	lpm	r30, Z
		if (command == iCommand) {
 584:	8e 17       	cp	r24, r30
 586:	09 f4       	brne	.+2      	; 0x58a <UARTProcessNextByte+0x11c>
 588:	88 c0       	rjmp	.+272    	; 0x69a <UARTProcessNextByte+0x22c>

void generateResponse(uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
 58a:	e8 e8       	ldi	r30, 0x88	; 136
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	e4 91       	lpm	r30, Z
		if (command == iCommand) {
 590:	8e 17       	cp	r24, r30
 592:	09 f4       	brne	.+2      	; 0x596 <UARTProcessNextByte+0x128>
 594:	64 c0       	rjmp	.+200    	; 0x65e <UARTProcessNextByte+0x1f0>

void generateResponse(uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
 596:	eb e8       	ldi	r30, 0x8B	; 139
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	e4 91       	lpm	r30, Z
		if (command == iCommand) {
 59c:	e8 17       	cp	r30, r24
 59e:	b9 f0       	breq	.+46     	; 0x5ce <UARTProcessNextByte+0x160>
				return true;
			} else if (0 == b) {
				// no payload
				state = usEnd;
				generateResponse(respBuffer, respSize);
				return true;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
			}
			break;
		}
	}
	return false;
}
 5a2:	0f 90       	pop	r0
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	08 95       	ret
			state = usPDataLength;
			break;
		}
		case usPDataLength: {
			if (MAX_DATA_LENGTH <= b) {
				state = usError;
 5b2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <state>
static usState state;
static uint8_t position = 0;
static uint8_t command, payloadSize, payload[MAX_DATA_LENGTH];

void generateErrorResponse(const eUARTResponseCodes code, uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
 5b6:	fb 01       	movw	r30, r22
 5b8:	10 82       	st	Z, r1
	response[1] = 0xFF; // command
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	81 83       	std	Z+1, r24	; 0x01
	response[2] = code;
 5be:	82 e9       	ldi	r24, 0x92	; 146
 5c0:	82 83       	std	Z+2, r24	; 0x02
	response[3] = 0; // payload size
 5c2:	13 82       	std	Z+3, r1	; 0x03
	*length = 4;
 5c4:	84 e0       	ldi	r24, 0x04	; 4
 5c6:	fa 01       	movw	r30, r20
 5c8:	80 83       	st	Z, r24
		}
		case usPDataLength: {
			if (MAX_DATA_LENGTH <= b) {
				state = usError;
				generateErrorResponse(eucMemoryError, respBuffer, respSize);
				return true;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	74 cf       	rjmp	.-280    	; 0x4b6 <UARTProcessNextByte+0x48>
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
		if (command == iCommand) {
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
 5ce:	ec e8       	ldi	r30, 0x8C	; 140
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	a5 91       	lpm	r26, Z+
 5d4:	b4 91       	lpm	r27, Z
			if (NULL == iFunction) {
 5d6:	10 97       	sbiw	r26, 0x00	; 0
 5d8:	09 f4       	brne	.+2      	; 0x5dc <UARTProcessNextByte+0x16e>
 5da:	d6 c0       	rjmp	.+428    	; 0x788 <UARTProcessNextByte+0x31a>
				response[2] = eucNotImplemented;
			} else {
				uint8_t responseSize = 0;
 5dc:	19 82       	std	Y+1, r1	; 0x01
				response[2] = iFunction(&payload[0], payloadSize, &response[4], &responseSize);
 5de:	a8 01       	movw	r20, r16
 5e0:	4c 5f       	subi	r20, 0xFC	; 252
 5e2:	5f 4f       	sbci	r21, 0xFF	; 255
 5e4:	9e 01       	movw	r18, r28
 5e6:	2f 5f       	subi	r18, 0xFF	; 255
 5e8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ea:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <payloadSize>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	fd 01       	movw	r30, r26
 5f4:	09 95       	icall
 5f6:	f8 01       	movw	r30, r16
 5f8:	82 83       	std	Z+2, r24	; 0x02
				response[3] = responseSize;
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	83 83       	std	Z+3, r24	; 0x03
				*length = responseSize + 4;
 5fe:	8c 5f       	subi	r24, 0xFC	; 252
 600:	f7 01       	movw	r30, r14
 602:	80 83       	st	Z, r24
				return true;
			} else if (0 == b) {
				// no payload
				state = usEnd;
				generateResponse(respBuffer, respSize);
				return true;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	cd cf       	rjmp	.-102    	; 0x5a2 <UARTProcessNextByte+0x134>
				state = usError;
				generateErrorResponse(eucMemoryError, respBuffer, respSize);
				return true;
			} else if (0 == b) {
				// no payload
				state = usEnd;
 608:	85 e0       	ldi	r24, 0x05	; 5
 60a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
	response[3] = 0; // payload size
	*length = 4;
}

void generateResponse(uint8_t *response, uint8_t *length) {
	response[0] = PROTO_VERSION;
 60e:	fb 01       	movw	r30, r22
 610:	10 82       	st	Z, r1
	response[1] = command;
 612:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <command>
 616:	81 83       	std	Z+1, r24	; 0x01
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
 618:	ec e7       	ldi	r30, 0x7C	; 124
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	e4 91       	lpm	r30, Z
		if (command == iCommand) {
 61e:	8e 13       	cpse	r24, r30
 620:	a2 cf       	rjmp	.-188    	; 0x566 <UARTProcessNextByte+0xf8>
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
 622:	ed e7       	ldi	r30, 0x7D	; 125
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	a5 91       	lpm	r26, Z+
 628:	b4 91       	lpm	r27, Z
			if (NULL == iFunction) {
 62a:	10 97       	sbiw	r26, 0x00	; 0
 62c:	09 f4       	brne	.+2      	; 0x630 <UARTProcessNextByte+0x1c2>
 62e:	9c c0       	rjmp	.+312    	; 0x768 <UARTProcessNextByte+0x2fa>
				response[2] = eucNotImplemented;
			} else {
				uint8_t responseSize = 0;
 630:	19 82       	std	Y+1, r1	; 0x01
				response[2] = iFunction(&payload[0], payloadSize, &response[4], &responseSize);
 632:	9e 01       	movw	r18, r28
 634:	2f 5f       	subi	r18, 0xFF	; 255
 636:	3f 4f       	sbci	r19, 0xFF	; 255
 638:	ab 01       	movw	r20, r22
 63a:	4c 5f       	subi	r20, 0xFC	; 252
 63c:	5f 4f       	sbci	r21, 0xFF	; 255
 63e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <payloadSize>
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	fd 01       	movw	r30, r26
 648:	09 95       	icall
 64a:	f8 01       	movw	r30, r16
 64c:	82 83       	std	Z+2, r24	; 0x02
				response[3] = responseSize;
 64e:	89 81       	ldd	r24, Y+1	; 0x01
 650:	83 83       	std	Z+3, r24	; 0x03
				*length = responseSize + 4;
 652:	8c 5f       	subi	r24, 0xFC	; 252
 654:	f7 01       	movw	r30, r14
 656:	80 83       	st	Z, r24
 658:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <command>
 65c:	84 cf       	rjmp	.-248    	; 0x566 <UARTProcessNextByte+0xf8>
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
		if (command == iCommand) {
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
 65e:	e9 e8       	ldi	r30, 0x89	; 137
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	a5 91       	lpm	r26, Z+
 664:	b4 91       	lpm	r27, Z
			if (NULL == iFunction) {
 666:	10 97       	sbiw	r26, 0x00	; 0
 668:	09 f4       	brne	.+2      	; 0x66c <UARTProcessNextByte+0x1fe>
 66a:	82 c0       	rjmp	.+260    	; 0x770 <UARTProcessNextByte+0x302>
				response[2] = eucNotImplemented;
			} else {
				uint8_t responseSize = 0;
 66c:	19 82       	std	Y+1, r1	; 0x01
				response[2] = iFunction(&payload[0], payloadSize, &response[4], &responseSize);
 66e:	9e 01       	movw	r18, r28
 670:	2f 5f       	subi	r18, 0xFF	; 255
 672:	3f 4f       	sbci	r19, 0xFF	; 255
 674:	a8 01       	movw	r20, r16
 676:	4c 5f       	subi	r20, 0xFC	; 252
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <payloadSize>
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	fd 01       	movw	r30, r26
 684:	09 95       	icall
 686:	f8 01       	movw	r30, r16
 688:	82 83       	std	Z+2, r24	; 0x02
				response[3] = responseSize;
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	83 83       	std	Z+3, r24	; 0x03
				*length = responseSize + 4;
 68e:	8c 5f       	subi	r24, 0xFC	; 252
 690:	f7 01       	movw	r30, r14
 692:	80 83       	st	Z, r24
 694:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <command>
 698:	7e cf       	rjmp	.-260    	; 0x596 <UARTProcessNextByte+0x128>
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
		if (command == iCommand) {
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
 69a:	e6 e8       	ldi	r30, 0x86	; 134
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	a5 91       	lpm	r26, Z+
 6a0:	b4 91       	lpm	r27, Z
			if (NULL == iFunction) {
 6a2:	10 97       	sbiw	r26, 0x00	; 0
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <UARTProcessNextByte+0x23a>
 6a6:	68 c0       	rjmp	.+208    	; 0x778 <UARTProcessNextByte+0x30a>
				response[2] = eucNotImplemented;
			} else {
				uint8_t responseSize = 0;
 6a8:	19 82       	std	Y+1, r1	; 0x01
				response[2] = iFunction(&payload[0], payloadSize, &response[4], &responseSize);
 6aa:	9e 01       	movw	r18, r28
 6ac:	2f 5f       	subi	r18, 0xFF	; 255
 6ae:	3f 4f       	sbci	r19, 0xFF	; 255
 6b0:	a8 01       	movw	r20, r16
 6b2:	4c 5f       	subi	r20, 0xFC	; 252
 6b4:	5f 4f       	sbci	r21, 0xFF	; 255
 6b6:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <payloadSize>
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	fd 01       	movw	r30, r26
 6c0:	09 95       	icall
 6c2:	f8 01       	movw	r30, r16
 6c4:	82 83       	std	Z+2, r24	; 0x02
				response[3] = responseSize;
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	83 83       	std	Z+3, r24	; 0x03
				*length = responseSize + 4;
 6ca:	8c 5f       	subi	r24, 0xFC	; 252
 6cc:	f7 01       	movw	r30, r14
 6ce:	80 83       	st	Z, r24
 6d0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <command>
 6d4:	5a cf       	rjmp	.-332    	; 0x58a <UARTProcessNextByte+0x11c>
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
		if (command == iCommand) {
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
 6d6:	e3 e8       	ldi	r30, 0x83	; 131
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	a5 91       	lpm	r26, Z+
 6dc:	b4 91       	lpm	r27, Z
			if (NULL == iFunction) {
 6de:	10 97       	sbiw	r26, 0x00	; 0
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <UARTProcessNextByte+0x276>
 6e2:	4e c0       	rjmp	.+156    	; 0x780 <UARTProcessNextByte+0x312>
				response[2] = eucNotImplemented;
			} else {
				uint8_t responseSize = 0;
 6e4:	19 82       	std	Y+1, r1	; 0x01
				response[2] = iFunction(&payload[0], payloadSize, &response[4], &responseSize);
 6e6:	9e 01       	movw	r18, r28
 6e8:	2f 5f       	subi	r18, 0xFF	; 255
 6ea:	3f 4f       	sbci	r19, 0xFF	; 255
 6ec:	a8 01       	movw	r20, r16
 6ee:	4c 5f       	subi	r20, 0xFC	; 252
 6f0:	5f 4f       	sbci	r21, 0xFF	; 255
 6f2:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <payloadSize>
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	fd 01       	movw	r30, r26
 6fc:	09 95       	icall
 6fe:	f8 01       	movw	r30, r16
 700:	82 83       	std	Z+2, r24	; 0x02
				response[3] = responseSize;
 702:	89 81       	ldd	r24, Y+1	; 0x01
 704:	83 83       	std	Z+3, r24	; 0x03
				*length = responseSize + 4;
 706:	8c 5f       	subi	r24, 0xFC	; 252
 708:	f7 01       	movw	r30, r14
 70a:	80 83       	st	Z, r24
 70c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <command>
 710:	36 cf       	rjmp	.-404    	; 0x57e <UARTProcessNextByte+0x110>
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
		if (command == iCommand) {
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
 712:	e0 e8       	ldi	r30, 0x80	; 128
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	a5 91       	lpm	r26, Z+
 718:	b4 91       	lpm	r27, Z
			if (NULL == iFunction) {
 71a:	10 97       	sbiw	r26, 0x00	; 0
 71c:	d1 f1       	breq	.+116    	; 0x792 <UARTProcessNextByte+0x324>
				response[2] = eucNotImplemented;
			} else {
				uint8_t responseSize = 0;
 71e:	19 82       	std	Y+1, r1	; 0x01
				response[2] = iFunction(&payload[0], payloadSize, &response[4], &responseSize);
 720:	9e 01       	movw	r18, r28
 722:	2f 5f       	subi	r18, 0xFF	; 255
 724:	3f 4f       	sbci	r19, 0xFF	; 255
 726:	a8 01       	movw	r20, r16
 728:	4c 5f       	subi	r20, 0xFC	; 252
 72a:	5f 4f       	sbci	r21, 0xFF	; 255
 72c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <payloadSize>
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	fd 01       	movw	r30, r26
 736:	09 95       	icall
 738:	f8 01       	movw	r30, r16
 73a:	82 83       	std	Z+2, r24	; 0x02
				response[3] = responseSize;
 73c:	89 81       	ldd	r24, Y+1	; 0x01
 73e:	83 83       	std	Z+3, r24	; 0x03
				*length = responseSize + 4;
 740:	8c 5f       	subi	r24, 0xFC	; 252
 742:	f7 01       	movw	r30, r14
 744:	80 83       	st	Z, r24
 746:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <command>
 74a:	13 cf       	rjmp	.-474    	; 0x572 <UARTProcessNextByte+0x104>
	response[0] = PROTO_VERSION;
	response[1] = command;
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
		if (command == iCommand) {
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
 74c:	ed e7       	ldi	r30, 0x7D	; 125
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	a5 91       	lpm	r26, Z+
 752:	b4 91       	lpm	r27, Z
			if (NULL == iFunction) {
 754:	10 97       	sbiw	r26, 0x00	; 0
 756:	41 f0       	breq	.+16     	; 0x768 <UARTProcessNextByte+0x2fa>
				response[2] = eucNotImplemented;
			} else {
				uint8_t responseSize = 0;
 758:	19 82       	std	Y+1, r1	; 0x01
				response[2] = iFunction(&payload[0], payloadSize, &response[4], &responseSize);
 75a:	9e 01       	movw	r18, r28
 75c:	2f 5f       	subi	r18, 0xFF	; 255
 75e:	3f 4f       	sbci	r19, 0xFF	; 255
 760:	a8 01       	movw	r20, r16
 762:	4c 5f       	subi	r20, 0xFC	; 252
 764:	5f 4f       	sbci	r21, 0xFF	; 255
 766:	6d cf       	rjmp	.-294    	; 0x642 <UARTProcessNextByte+0x1d4>
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
		if (command == iCommand) {
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
			if (NULL == iFunction) {
				response[2] = eucNotImplemented;
 768:	94 e9       	ldi	r25, 0x94	; 148
 76a:	f8 01       	movw	r30, r16
 76c:	92 83       	std	Z+2, r25	; 0x02
 76e:	fb ce       	rjmp	.-522    	; 0x566 <UARTProcessNextByte+0xf8>
 770:	94 e9       	ldi	r25, 0x94	; 148
 772:	f8 01       	movw	r30, r16
 774:	92 83       	std	Z+2, r25	; 0x02
 776:	0f cf       	rjmp	.-482    	; 0x596 <UARTProcessNextByte+0x128>
 778:	94 e9       	ldi	r25, 0x94	; 148
 77a:	f8 01       	movw	r30, r16
 77c:	92 83       	std	Z+2, r25	; 0x02
 77e:	05 cf       	rjmp	.-502    	; 0x58a <UARTProcessNextByte+0x11c>
 780:	94 e9       	ldi	r25, 0x94	; 148
 782:	f8 01       	movw	r30, r16
 784:	92 83       	std	Z+2, r25	; 0x02
 786:	fb ce       	rjmp	.-522    	; 0x57e <UARTProcessNextByte+0x110>
 788:	84 e9       	ldi	r24, 0x94	; 148
 78a:	f8 01       	movw	r30, r16
 78c:	82 83       	std	Z+2, r24	; 0x02
				return true;
			} else if (0 == b) {
				// no payload
				state = usEnd;
				generateResponse(respBuffer, respSize);
				return true;
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	08 cf       	rjmp	.-496    	; 0x5a2 <UARTProcessNextByte+0x134>
	for (uint8_t i = 0; i < UART_FUNCTIONS_NUMBER; i++) {
		eUARTFunction iCommand = pgm_read_byte((const uint8_t*) &(UARTFunctions[i].function));
		if (command == iCommand) {
			fUARTFunction iFunction = (fUARTFunction) pgm_read_ptr(&(UARTFunctions[i].callback));
			if (NULL == iFunction) {
				response[2] = eucNotImplemented;
 792:	94 e9       	ldi	r25, 0x94	; 148
 794:	f8 01       	movw	r30, r16
 796:	92 83       	std	Z+2, r25	; 0x02
 798:	ec ce       	rjmp	.-552    	; 0x572 <UARTProcessNextByte+0x104>

0000079a <uart_init>:
		if (0xC0 == c) {
			queueChar(0xDB);
			c = 0xDC;
		} else if (0xDB == c) {
			queueChar(0xDB);
			c = 0xDD;
 79a:	51 9a       	sbi	0x0a, 1	; 10
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7a2:	88 e9       	ldi	r24, 0x98	; 152
 7a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 7a8:	86 e0       	ldi	r24, 0x06	; 6
 7aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 7ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 7b2:	80 e1       	ldi	r24, 0x10	; 16
 7b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 7b8:	08 95       	ret

000007ba <__vector_20>:
	if (UARTProcessNextByte(b, &respBuffer[0], &respSize)) {
		uSendFrame(respBuffer, respSize);
	}
}

ISR(USART0_RX_vect) {
 7ba:	1f 92       	push	r1
 7bc:	0f 92       	push	r0
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	0f 92       	push	r0
 7c2:	11 24       	eor	r1, r1
 7c4:	2f 93       	push	r18
 7c6:	3f 93       	push	r19
 7c8:	4f 93       	push	r20
 7ca:	5f 93       	push	r21
 7cc:	6f 93       	push	r22
 7ce:	7f 93       	push	r23
 7d0:	8f 93       	push	r24
 7d2:	9f 93       	push	r25
 7d4:	af 93       	push	r26
 7d6:	bf 93       	push	r27
 7d8:	ef 93       	push	r30
 7da:	ff 93       	push	r31
	parseFrame(UDR0);
 7dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	U_TRANSMIT_START;
}

void parseFrame(unsigned char b) {
	switch (b) {
 7e0:	8b 3d       	cpi	r24, 0xDB	; 219
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <__vector_20+0x2c>
 7e4:	76 c0       	rjmp	.+236    	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 7e6:	08 f4       	brcc	.+2      	; 0x7ea <__vector_20+0x30>
 7e8:	6c c0       	rjmp	.+216    	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 7ea:	8c 3d       	cpi	r24, 0xDC	; 220
 7ec:	f9 f0       	breq	.+62     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7ee:	8d 3d       	cpi	r24, 0xDD	; 221
 7f0:	21 f4       	brne	.+8      	; 0x7fa <__vector_20+0x40>
				escActive = false;
			}
			break;
		}
		case 0xDD: {
			if (escActive) {
 7f2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <escActive>
 7f6:	91 11       	cpse	r25, r1
 7f8:	74 c0       	rjmp	.+232    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
				escActive = false;
			}
			break;
		}
	}
	if (UARTProcessNextByte(b, &respBuffer[0], &respSize)) {
 7fa:	45 e1       	ldi	r20, 0x15	; 21
 7fc:	51 e0       	ldi	r21, 0x01	; 1
 7fe:	66 e1       	ldi	r22, 0x16	; 22
 800:	71 e0       	ldi	r23, 0x01	; 1
 802:	0e 94 37 02 	call	0x46e	; 0x46e <UARTProcessNextByte>
 806:	81 11       	cpse	r24, r1
 808:	20 c0       	rjmp	.+64     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
	}
}

ISR(USART0_RX_vect) {
	parseFrame(UDR0);
}
 80a:	ff 91       	pop	r31
 80c:	ef 91       	pop	r30
 80e:	bf 91       	pop	r27
 810:	af 91       	pop	r26
 812:	9f 91       	pop	r25
 814:	8f 91       	pop	r24
 816:	7f 91       	pop	r23
 818:	6f 91       	pop	r22
 81a:	5f 91       	pop	r21
 81c:	4f 91       	pop	r20
 81e:	3f 91       	pop	r19
 820:	2f 91       	pop	r18
 822:	0f 90       	pop	r0
 824:	0f be       	out	0x3f, r0	; 63
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti
		case 0xDB: {
			escActive = true;
			return;
		}
		case 0xDC: {
			if (escActive) {
 82c:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <escActive>
 830:	99 23       	and	r25, r25
 832:	19 f3       	breq	.-58     	; 0x7fa <__vector_20+0x40>
				b = 0xC0;
				escActive = false;
 834:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <escActive>
			escActive = true;
			return;
		}
		case 0xDC: {
			if (escActive) {
				b = 0xC0;
 838:	80 ec       	ldi	r24, 0xC0	; 192
				escActive = false;
			}
			break;
		}
	}
	if (UARTProcessNextByte(b, &respBuffer[0], &respSize)) {
 83a:	45 e1       	ldi	r20, 0x15	; 21
 83c:	51 e0       	ldi	r21, 0x01	; 1
 83e:	66 e1       	ldi	r22, 0x16	; 22
 840:	71 e0       	ldi	r23, 0x01	; 1
 842:	0e 94 37 02 	call	0x46e	; 0x46e <UARTProcessNextByte>
 846:	88 23       	and	r24, r24
 848:	01 f3       	breq	.-64     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		uSendFrame(respBuffer, respSize);
 84a:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <respSize>
	UBRR0H = 0;
	UBRR0L = 16;
}

void queueChar(const uint8_t c) {
	sendBuffer[sendBufferEnd] = c;
 84e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <sendBufferEnd>
 852:	e8 2f       	mov	r30, r24
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	e7 5a       	subi	r30, 0xA7	; 167
 858:	fe 4f       	sbci	r31, 0xFE	; 254
 85a:	90 ec       	ldi	r25, 0xC0	; 192
 85c:	90 83       	st	Z, r25
	// separately, so no garbage is sent
	sendBufferEnd++;
 85e:	8f 5f       	subi	r24, 0xFF	; 255
	if (SENDBUFFER_SIZE <= sendBufferEnd) sendBufferEnd = 0;
 860:	80 34       	cpi	r24, 0x40	; 64
 862:	d8 f5       	brcc	.+118    	; 0x8da <__DATA_REGION_LENGTH__+0xda>
}

void queueChar(const uint8_t c) {
	sendBuffer[sendBufferEnd] = c;
	// separately, so no garbage is sent
	sendBufferEnd++;
 864:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <sendBufferEnd>
}

void uSendFrame(const uint8_t *bytes, const uint8_t number) {
	// frame start
	queueChar(0xC0);
	for (int8_t i = 0; i < number; i++) {
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	61 15       	cp	r22, r1
 86c:	71 05       	cpc	r23, r1
 86e:	09 f4       	brne	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 870:	54 c0       	rjmp	.+168    	; 0x91a <__stack+0x1b>
 872:	40 e0       	ldi	r20, 0x00	; 0
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
	UBRR0H = 0;
	UBRR0L = 16;
}

void queueChar(const uint8_t c) {
	sendBuffer[sendBufferEnd] = c;
 878:	5b ed       	ldi	r21, 0xDB	; 219
 87a:	13 c0       	rjmp	.+38     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
	for (int8_t i = 0; i < number; i++) {
		uint8_t c = bytes[i];
		if (0xC0 == c) {
			queueChar(0xDB);
			c = 0xDC;
		} else if (0xDB == c) {
 87c:	9b 3d       	cpi	r25, 0xDB	; 219
 87e:	a9 f1       	breq	.+106    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
	UBRR0H = 0;
	UBRR0L = 16;
}

void queueChar(const uint8_t c) {
	sendBuffer[sendBufferEnd] = c;
 880:	e8 2f       	mov	r30, r24
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	e7 5a       	subi	r30, 0xA7	; 167
 886:	fe 4f       	sbci	r31, 0xFE	; 254
 888:	90 83       	st	Z, r25
	// separately, so no garbage is sent
	sendBufferEnd++;
 88a:	8f 5f       	subi	r24, 0xFF	; 255
	if (SENDBUFFER_SIZE <= sendBufferEnd) sendBufferEnd = 0;
 88c:	80 34       	cpi	r24, 0x40	; 64
 88e:	08 f0       	brcs	.+2      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	4f 5f       	subi	r20, 0xFF	; 255
}

void uSendFrame(const uint8_t *bytes, const uint8_t number) {
	// frame start
	queueChar(0xC0);
	for (int8_t i = 0; i < number; i++) {
 894:	24 2f       	mov	r18, r20
 896:	04 2e       	mov	r0, r20
 898:	00 0c       	add	r0, r0
 89a:	33 0b       	sbc	r19, r19
 89c:	26 17       	cp	r18, r22
 89e:	37 07       	cpc	r19, r23
 8a0:	d4 f5       	brge	.+116    	; 0x916 <__stack+0x17>
		uint8_t c = bytes[i];
 8a2:	f9 01       	movw	r30, r18
 8a4:	ea 5e       	subi	r30, 0xEA	; 234
 8a6:	fe 4f       	sbci	r31, 0xFE	; 254
 8a8:	90 81       	ld	r25, Z
		if (0xC0 == c) {
 8aa:	90 3c       	cpi	r25, 0xC0	; 192
 8ac:	39 f7       	brne	.-50     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
	UBRR0H = 0;
	UBRR0L = 16;
}

void queueChar(const uint8_t c) {
	sendBuffer[sendBufferEnd] = c;
 8ae:	e8 2f       	mov	r30, r24
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	e7 5a       	subi	r30, 0xA7	; 167
 8b4:	fe 4f       	sbci	r31, 0xFE	; 254
 8b6:	50 83       	st	Z, r21
	// separately, so no garbage is sent
	sendBufferEnd++;
 8b8:	8f 5f       	subi	r24, 0xFF	; 255
	if (SENDBUFFER_SIZE <= sendBufferEnd) sendBufferEnd = 0;
 8ba:	80 34       	cpi	r24, 0x40	; 64
 8bc:	00 f5       	brcc	.+64     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
	queueChar(0xC0);
	for (int8_t i = 0; i < number; i++) {
		uint8_t c = bytes[i];
		if (0xC0 == c) {
			queueChar(0xDB);
			c = 0xDC;
 8be:	9c ed       	ldi	r25, 0xDC	; 220
 8c0:	df cf       	rjmp	.-66     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
	}
	U_TRANSMIT_START;
}

void parseFrame(unsigned char b) {
	switch (b) {
 8c2:	80 3c       	cpi	r24, 0xC0	; 192
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8c6:	99 cf       	rjmp	.-206    	; 0x7fa <__vector_20+0x40>
		case 0xC0: {
			UARTBeginTransaction();
 8c8:	0e 94 33 02 	call	0x466	; 0x466 <UARTBeginTransaction>
			escActive = false;
 8cc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <escActive>
 8d0:	9c cf       	rjmp	.-200    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
			return;
		}
		case 0xDB: {
			escActive = true;
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <escActive>
 8d8:	98 cf       	rjmp	.-208    	; 0x80a <__DATA_REGION_LENGTH__+0xa>

void queueChar(const uint8_t c) {
	sendBuffer[sendBufferEnd] = c;
	// separately, so no garbage is sent
	sendBufferEnd++;
	if (SENDBUFFER_SIZE <= sendBufferEnd) sendBufferEnd = 0;
 8da:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <sendBufferEnd>
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	c3 cf       	rjmp	.-122    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
			break;
		}
		case 0xDD: {
			if (escActive) {
				b = 0xDB;
				escActive = false;
 8e2:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <escActive>
			}
			break;
		}
		case 0xDD: {
			if (escActive) {
				b = 0xDB;
 8e6:	8b ed       	ldi	r24, 0xDB	; 219
 8e8:	88 cf       	rjmp	.-240    	; 0x7fa <__vector_20+0x40>
	UBRR0H = 0;
	UBRR0L = 16;
}

void queueChar(const uint8_t c) {
	sendBuffer[sendBufferEnd] = c;
 8ea:	e8 2f       	mov	r30, r24
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	e7 5a       	subi	r30, 0xA7	; 167
 8f0:	fe 4f       	sbci	r31, 0xFE	; 254
 8f2:	90 83       	st	Z, r25
	// separately, so no garbage is sent
	sendBufferEnd++;
 8f4:	8f 5f       	subi	r24, 0xFF	; 255
	if (SENDBUFFER_SIZE <= sendBufferEnd) sendBufferEnd = 0;
 8f6:	80 34       	cpi	r24, 0x40	; 64
 8f8:	b0 f4       	brcc	.+44     	; 0x926 <__stack+0x27>
		if (0xC0 == c) {
			queueChar(0xDB);
			c = 0xDC;
		} else if (0xDB == c) {
			queueChar(0xDB);
			c = 0xDD;
 8fa:	9d ed       	ldi	r25, 0xDD	; 221
 8fc:	c1 cf       	rjmp	.-126    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
	queueChar(0xC0);
	for (int8_t i = 0; i < number; i++) {
		uint8_t c = bytes[i];
		if (0xC0 == c) {
			queueChar(0xDB);
			c = 0xDC;
 8fe:	8c ed       	ldi	r24, 0xDC	; 220
	UBRR0H = 0;
	UBRR0L = 16;
}

void queueChar(const uint8_t c) {
	sendBuffer[sendBufferEnd] = c;
 900:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <sendBuffer>
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	4f 5f       	subi	r20, 0xFF	; 255
}

void uSendFrame(const uint8_t *bytes, const uint8_t number) {
	// frame start
	queueChar(0xC0);
	for (int8_t i = 0; i < number; i++) {
 908:	24 2f       	mov	r18, r20
 90a:	04 2e       	mov	r0, r20
 90c:	00 0c       	add	r0, r0
 90e:	33 0b       	sbc	r19, r19
 910:	26 17       	cp	r18, r22
 912:	37 07       	cpc	r19, r23
 914:	34 f2       	brlt	.-116    	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 916:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <sendBufferEnd>
			queueChar(0xDB);
			c = 0xDD;
		}
		queueChar(c);
	}
	U_TRANSMIT_START;
 91a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 91e:	80 62       	ori	r24, 0x20	; 32
 920:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 924:	72 cf       	rjmp	.-284    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		if (0xC0 == c) {
			queueChar(0xDB);
			c = 0xDC;
		} else if (0xDB == c) {
			queueChar(0xDB);
			c = 0xDD;
 926:	8d ed       	ldi	r24, 0xDD	; 221
 928:	eb cf       	rjmp	.-42     	; 0x900 <__stack+0x1>

0000092a <__vector_21>:

ISR(USART0_RX_vect) {
	parseFrame(UDR0);
}

ISR(USART0_UDRE_vect) {
 92a:	1f 92       	push	r1
 92c:	0f 92       	push	r0
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	0f 92       	push	r0
 932:	11 24       	eor	r1, r1
 934:	8f 93       	push	r24
 936:	ef 93       	push	r30
 938:	ff 93       	push	r31
	if (sendBufferBegin == sendBufferEnd) {
 93a:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <sendBufferBegin>
 93e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <sendBufferEnd>
 942:	e8 17       	cp	r30, r24
 944:	c1 f0       	breq	.+48     	; 0x976 <__vector_21+0x4c>
		UCSR0B &= ~(1 << UDRIE0);
		return;
	}
	UDR0 = sendBuffer[sendBufferBegin++];
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	8e 0f       	add	r24, r30
 94a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <sendBufferBegin>
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	e7 5a       	subi	r30, 0xA7	; 167
 952:	fe 4f       	sbci	r31, 0xFE	; 254
 954:	80 81       	ld	r24, Z
 956:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (SENDBUFFER_SIZE <= sendBufferBegin) sendBufferBegin = 0;
 95a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sendBufferBegin>
 95e:	80 34       	cpi	r24, 0x40	; 64
 960:	10 f0       	brcs	.+4      	; 0x966 <__vector_21+0x3c>
 962:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <sendBufferBegin>
}
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	8f 91       	pop	r24
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti
	parseFrame(UDR0);
}

ISR(USART0_UDRE_vect) {
	if (sendBufferBegin == sendBufferEnd) {
		UCSR0B &= ~(1 << UDRIE0);
 976:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 97a:	8f 7d       	andi	r24, 0xDF	; 223
 97c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		return;
	}
	UDR0 = sendBuffer[sendBufferBegin++];
	if (SENDBUFFER_SIZE <= sendBufferBegin) sendBufferBegin = 0;
}
 980:	ff 91       	pop	r31
 982:	ef 91       	pop	r30
 984:	8f 91       	pop	r24
 986:	0f 90       	pop	r0
 988:	0f be       	out	0x3f, r0	; 63
 98a:	0f 90       	pop	r0
 98c:	1f 90       	pop	r1
 98e:	18 95       	reti

00000990 <_exit>:
 990:	f8 94       	cli

00000992 <__stop_program>:
 992:	ff cf       	rjmp	.-2      	; 0x992 <__stop_program>
